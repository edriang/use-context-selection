{"version":3,"sources":["../../src/isShallowEqual.ts","../../src/useContextSelection.ts","context.js","components/Row.js","components/RowWithRegularContext.jsx","components/RowWithImprovedContext.jsx","App.js","serviceWorker.js","index.js"],"names":["hasOwn","isEqualShallow","a","akeys","Object","bkeys","n","k","b","LISTENER_UID","contextListeners","useContextSelection","listenerID","React","contextValue","getterFn","currentSelection","forceUpdate","listeners","listener","createContextProvider","Context","children","numOfRows","useReducer","state","type","payload","rows","slice","index","value","Array","fill","map","Date","now","dispatch","useEffect","setRowValue","Provider","RegularContext","createContext","RegularProvider","ImprovedContext","newResult","selector","createContextConsumer","ImprovedProvider","Component","setValue","name","style","whiteSpace","moment","format","className","onClick","RowWithRegularContext","memo","useContext","useCallback","Row","RowWithImprovedContext","store","rowValue","simulateClicks","tableClassName","setButtonsDisabled","buttons","document","querySelectorAll","startTime","clickNextButton","onFinish","length","alert","click","window","requestAnimationFrame","App","useState","setNumOfRows","buttonsDisabled","onChange","e","parseInt","target","disabled","_","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0a711b3.chunk.js","sourcesContent":["const hasOwn = {}.hasOwnProperty;\n\nfunction isEqualShallow(a: any, b: any): boolean {\n  if (a === b) return true;\n  if (!a || !b) return false;\n\n  const akeys = Object.keys(a);\n  const bkeys = Object.keys(b);\n\n  if (akeys.length !== bkeys.length) return false;\n\n  let n = akeys.length;\n\n  while (n--) {\n    const k = akeys[n];\n\n    if (!hasOwn.call(b, k) || a[k] !== b[k]) {\n      if (typeof a[k] === 'function' && typeof b[k] === 'function') {\n        continue;\n      }\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default isEqualShallow;\n","import React from 'react';\n\nimport isEqualShallow from './isShallowEqual';\n\nlet LISTENER_UID = 1;\n\ntype GetterFn = (state: any) => any;\ntype Listener = {\n  getterFn: GetterFn;\n  forceUpdate: Function;\n};\ntype ContextListeners = Map<number, Listener>;\n\nconst contextListeners = new Map<React.Context<any>, ContextListeners>();\n\nfunction createContextConsumer<T>(Context: React.Context<T>) {\n  return ({ children, selector = (store: any) => store }: any) => {\n    const contextValue = useContextSelection(Context, selector);\n\n    return children(contextValue);\n  };\n}\n\nfunction createContext<T>(initValue: any): React.Context<T> {\n  // @ts-ignore\n  const Context = React.createContext<T>(initValue, (oldValue: T, newValue: T) => {\n    const listeners = contextListeners.get(Context);\n\n    if (!listeners) {\n      return 0;\n    }\n\n    for (const [, listener] of listeners) {\n      const newResult = listener.getterFn(newValue);\n\n      if (!isEqualShallow(newResult, listener.getterFn(oldValue))) {\n        listener.forceUpdate(newResult);\n      }\n    }\n    return 0;\n  });\n\n  // @ts-ignore\n  Context.Consumer = createContextConsumer(Context);\n\n  return Context;\n}\n\nfunction useContextSelection<T = any>(Context: React.Context<T>, getterFn: GetterFn): Partial<T> {\n  const listenerID = React.useRef(LISTENER_UID++);\n  const contextValue = React.useContext(Context);\n  const [currentSelection, forceUpdate] = React.useState<any>(getterFn(contextValue));\n\n  React.useEffect(() => {\n    return () => {\n      const listeners = contextListeners.get(Context);\n\n      if (!listeners) {\n        return;\n      }\n\n      listeners.delete(listenerID.current);\n\n      if (listeners.size === 0) {\n        contextListeners.delete(Context);\n      }\n    };\n  }, []);\n\n  let listeners = contextListeners.get(Context);\n\n  if (!listeners) {\n    listeners = new Map();\n\n    contextListeners.set(Context, listeners);\n  }\n\n  let listener = listeners.get(listenerID.current);\n\n  if (!listener) {\n    listener = {\n      getterFn,\n      forceUpdate,\n    };\n    listeners.set(listenerID.current, listener);\n  }\n\n  return currentSelection;\n}\n\nexport { createContext, useContextSelection };\n","import React from 'react';\nimport { createContext, useContextSelection } from 'use-context-selection';\n\nfunction createContextProvider(Context) {\n    return ({ children, numOfRows}) => {\n\n        const [state, dispatch] = React.useReducer((state, { type, payload = {} }) => {\n            switch (type) {\n                case 'INCREMENT':\n                    const rows = state.rows.slice(0);\n\n                    rows[payload.index] = payload.value;\n\n                    return { ...state, rows };\n\n                case 'SET_ROW_NUMBER':\n                    return {\n                        ...state,\n                        rows: new Array(payload.numOfRows).fill(0).map(() => Date.now()),\n                    };\n                default:\n                    return state;\n            }\n        }, { rows: [] })\n\n        const setRowValue = (index, value) => {\n            dispatch({\n                type: 'INCREMENT',\n                payload: { index, value },\n            })\n        };\n\n        React.useEffect(() => {\n            dispatch({ type: 'SET_ROW_NUMBER', payload: { numOfRows }})\n        }, [numOfRows]);\n    \n        const value = {\n            rows: state.rows,\n            setRowValue,\n        };\n    \n        return <Context.Provider value={value}>{children}</Context.Provider>\n    };\n}\n\nconst RegularContext = React.createContext({});\nconst RegularProvider = createContextProvider(RegularContext);\nconst useRegularContext = () => React.useContext(RegularContext);\n\n\nconst ImprovedContext = createContext({});\nconst ImprovedProvider = createContextProvider(ImprovedContext);\nconst useImprovedContext = (getterFn) => useContextSelection(ImprovedContext, getterFn);\n\nexport {\n    RegularProvider,\n    useRegularContext,\n\n    ImprovedContext,\n    ImprovedProvider,\n    useImprovedContext,\n};\n","import React from 'react';\nimport moment from 'moment';\n\nconst Component = ({ value, setValue, name }) => {\n    const updateValue = () => {\n        setValue(Date.now());\n    }\n\n    return (\n        <tr>\n            <td>\n                <strong style={{whiteSpace: 'nowrap'}}>{name}</strong>\n            </td>\n            <td>\n                <strong>Rendered:</strong>\n                <p>{moment().format('hh:mm:ss.SSS')}</p>\n            </td>\n            <td>\n                <strong>Updated:</strong>\n                <p>{moment(value).format('hh:mm:ss.SSS')}</p>\n            </td>\n            <td>\n                <button style={{whiteSpace: 'nowrap'}} className={`btn btn-primary btn-sm`} onClick={updateValue}>Update value</button>\n            </td>\n        </tr>\n        \n    )\n}\n\nexport default Component;\n","import React from 'react';\n\nimport Row from './Row';\nimport { useRegularContext } from '../context';\n\nconst RowWithRegularContext = React.memo(({ name, index }) => {\n    const { rows, setRowValue } = useRegularContext();\n\n    const setValue = React.useCallback((value) => setRowValue(index, value), [index]);\n\n    return <Row value={rows[index]} setValue={setValue} name={name} />\n});\n\nexport default RowWithRegularContext;\n","import React from 'react';\n\nimport Row from './Row';\nimport { useImprovedContext } from '../context';\n\nconst RowWithImprovedContext = React.memo(({ name, index }) => {\n    const { rowValue, setRowValue } = useImprovedContext(store => {\n        // console.log('useImprovedContext', { store });\n        return {\n            rowValue: store.rows[index],\n            setRowValue: store.setRowValue,\n        };    \n    });\n    const setValue = React.useCallback((value) => setRowValue(index, value), [index]);\n\n    return <Row value={rowValue} setValue={setValue} name={name} />\n});\n\nexport default RowWithImprovedContext;\n","import React from 'react';\n\nimport './App.css';\n\nimport { RegularProvider, ImprovedProvider, ImprovedContext } from './context';\n\nimport RowWithRegularContext from './components/RowWithRegularContext';\nimport RowWithImprovedContext from './components/RowWithImprovedContext';\n\nconst NUM_ROWS = 300;\n\nfunction simulateClicks(tableClassName, setButtonsDisabled) {\n  const buttons = document.querySelectorAll(`.table.${tableClassName} .btn`);\n  const startTime = Date.now();\n\n  setButtonsDisabled(true);\n\n  clickNextButton(buttons, 0, startTime, () => setButtonsDisabled(false));\n}\n\nfunction clickNextButton(buttons, index, startTime, onFinish) {\n  if (index === buttons.length) {\n    onFinish();\n    alert(`Render finished: ${Date.now() - startTime}ms`)\n    return;\n  }\n  buttons[index].click();\n\n  window.requestAnimationFrame(() => {\n    clickNextButton(buttons, index + 1, startTime, onFinish);\n  });\n}\n\nfunction App() {\n  const [numOfRows, setNumOfRows] = React.useState(NUM_ROWS);\n  const [buttonsDisabled, setButtonsDisabled] = React.useState(false);\n\n  return (\n    <div className={`App container container-xl ${buttonsDisabled ? 'buttons-disabled' : ''}`}>\n      <div className=\"pb-5\">\n        <h1>Performance comparison</h1>\n        <p>Enter the number of rows you want to render</p>\n\n        <div>\n          <input type=\"number\" className=\"form-control input-number\" value={numOfRows} onChange={(e) => setNumOfRows(parseInt(e.target.value || 0))} />\n        </div>\n\n        <p>On the left side, each value is read directly from Context. On the right side, values are read from Context using use-context-selection.</p>\n        <p>For each row we render we are displaying the rendered time and a the last time that cell was updated.</p>\n        <p>When you click a button its updated-time value is updated and a re-render is triggered. Note that for regular Context that means re-rendering all the rows even though its cell-value didn't change.</p>\n        <p>With use-context-selection you can retrieve chunks from your Context and your components will update only when that value is updated, which improves the performance significantly.</p>\n        <br />\n        <p className=\"alert alert-info\">\n          The \"Simulate Click All\" button will \"click\", one by one, on every row-button.\n          <br />\n          After clicking on every button an alert message will be displayed showing the amount of time it took to render every row.\n          <br />\n          <strong>To experience a real difference in performance enter more than 150 rows; on the left example the time complexity increases exponentially, while on the right example it increases linearly.</strong>\n        </p>\n      </div>\n      <div className=\"row\">\n        <div className=\"col col-6\">\n          <h2>\n            Regular Context\n            <button disabled={buttonsDisabled} className=\"btn btn-success btn-sm float-right\" onClick={() => simulateClicks('context', setButtonsDisabled)}>{ buttonsDisabled ? 'Processing...' : 'Simulate Click All' }</button>\n          </h2>\n          <RegularProvider numOfRows={numOfRows}>\n            <table className=\"table context\">\n              <tbody>\n                  {(new Array(numOfRows).fill(0).map((_, index) => (\n                    <RowWithRegularContext key={`row-${index}`} name={`Row ${index + 1}A`} index={index} />\n                  )))}\n              </tbody>\n            </table>\n          </RegularProvider>\n        </div>\n        <div className=\"col col-6\">\n          <h2>\n            useContextSelection\n            <button disabled={buttonsDisabled} className=\"btn btn-success btn-sm float-right\" onClick={() => simulateClicks('use-context-selection', setButtonsDisabled)}>{ buttonsDisabled ? 'Processing...' : 'Simulate Click All' }</button>\n          </h2>\n          <ImprovedProvider numOfRows={numOfRows}>\n            {/* <ImprovedContext.Consumer selector={state => ({ length: state.rows.length })}>\n              {({ length }) => String(length)}\n            </ImprovedContext.Consumer> */}\n            <table className=\"table use-context-selection\">\n                <tbody>\n                  {(new Array(numOfRows).fill(0).map((_, index) => (\n                    <RowWithImprovedContext key={`row-${index}`} name={`Row ${index + 1}B`} index={index} />\n                  )))}\n                </tbody>\n            </table>\n          </ImprovedProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}